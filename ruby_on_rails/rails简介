Rails框架首次提出是在2004年7月，它的研发者是26岁的丹麦人David Heinemeier Hansson。
不同于已有复杂的Web 开发框架，Rails是一个更符合实际需要而且更高效的Web开发框架。
Rails结合了PHP体系的优点（快速开发）和Java体系的优点（程序规整），
因此，Rails在其提出后不长的时间里就受到了业内广泛的关注。

rails特点：
    1.全栈式的MVC框架
        Rails是一个全栈式的MVC框架，换句话说，通过Rails可以实现MVC模式中的各个层次，并使它们无缝地协同运转起来。
        在实际开发一个MVC模式的Web应用项目时，如果使用Java开发，需要用到Struts（View 层）、Hibernate（Model层）
        和Spring（Controller 层）,spring 整合mvc 3个框架，而且需要额外整合3个框架开发出的内容。
        而使用Ruby语言开发相同的项目时，只需要用到Rails框架就可以完成。

    2.约定优于配置
        为了说明各个对象之间的关联关系，一般的Web应用开发框架往往采用写入XML配置文件的方法。这种方式虽然可以解决一些问题，
        但是却带来了管理上的混乱。Rails 对此的态度是约定优于配置，这意味着在Rails中不会出现XML配置文件。
        Rails使用Web应用多年来积累的各种常见约定（更具体地说是命名规则）来代替XML配置文件，
        而在Rails内部的映射与发现机制根据这些约定可以实现对象之间的关联。
        在第1章中，通过Rails的映射与发现机制实现了数据表与Ruby对象之间的关联。

    3.更少的代码
        使用约定来代替XML配置文件说明Rails本身完成了大量的底层工作，这意味着使用更少的代码来实现应用程序是极有可能的。
        此外，代码量的缩减也减小了出现bug的可能性，降低了维护程序和升级程序的难度。

    4.生成器
        Rails 使用的实时映射技术和元编程技术，免去了开发人员在开发过程中编写大量样板文件代码的烦恼。
        在少数需要使用样板文件代码的时候，开发人员可以通过 Rails内建的生成器脚本实时创建，而不再是通过手工编写。
        Rails的这个特点可以使开发人员更专注于系统的逻辑结构，而不必为一些琐碎的细节所烦扰。

    5.零周转时间
        对已有的Web应用系统进行修改后，其一般需要经过配置、编译、发布、重新设置、测试等一系列步骤才能投入使用，
        这明显浪费了许多时间。而使用Rails开发Web应用系统，可以通过浏览器即时查看程序运行结果，从而节约了大量的时间。

    6.支架系统
        Rails的支架系统可以自动为任何相关的数据库表创建一套包含标准CRUD操作和前台视图的系统。
        通过支架系统，开发人员可以方便快捷地操纵数据库中的数据表。
        此外，Rails也允许开发人员使用自己设计的代码或视图来替换自动生成的代码和视图。

    7.指导原则
        Rails的指导原则是"不要重复你自己"(Don't Repeat Yourself, 或DRY).意思是说你写的代码不会有重复的地方.
        比如以往数据库的接口往往是类似的程序代码但是在很多地方都要重复用到.这无论是给编写还是维护都造成了很大的代价.
        相反,Rails给你提供了绝大多数的支持,让你只需要短短的几行代码就可以实现强大的功能.
        而且,Rails提供了代码生成工具,让你甚至不需要编写一行代码就实现强大的管理程序.
        Rails通过reflection和runtime extension减少了对configuration文件的依靠,
        这和Java,C#语言的方向有很大不同,让你减少了很多配置和部署的麻烦,但是性能上却完全可以应付一般网站的需求.


rails3种环境：
    1.开发
        在开发环境中，应用软件的源代码的变化是立即可见的，我们需要做的只是在浏览器中重载相应的页面。
        在这种环境中，速度不是一个关键因素，而重点是要求开发人员对于显示每页的组件给与足够的关注。在开发环境中发生错误时，
        开发人员能够一看就断定是哪一行代码导致类错误，而且该行是如何调用的。
        这一功能由显示异常错误的栈（导致错误的所有方法的综合列表）跟踪提供。

    2.测试
        在测试阶段，每次测试都需要恢复数据库中的原始哑元数据，这样就保证了测试的结果是一致的，而且行为是可重复的。
        在rails中单元和功能测试程序是完全自动的。测试rails应用程序时，并不使用传统的web浏览器，取而代之的是，
        由命令行调用测试，随后转为后台程序运行。测试环境为程序操作提供了一个专属环境。

    3.产品
        应用程序最终成型的时候，它已经通过了良好的测试，因此所有的（至少大部分）错误都已经排除了。此时，代码库的更新不会很频繁，
        这就意味着产品环境可以更注重性能。该阶段不需要完成诸如为调试程序写扩展日志之类的任务。
        一旦出现错误，不能够再显示令客户困惑的栈跟踪信息，栈跟踪最好在开发环境中使用。

    这3种环境的需求截然不同，所以rails在彼此完全独立的数据库中为每个环境存储数据。因此在某个特定的时间里，你可能有：
        **在产品环境中，与实际用户交互的有效数据；
        **在开发环境中，用来调试错误或开发新特性的有效数据的副本；
        **不断加载到测试环境中的测试数据的集合。

