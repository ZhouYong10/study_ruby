Ruby使用Float类来近似的表示实数，Float类会利用本地平台的浮点数表示形式。

一个浮点数字面量就是在一个可选的正号或负号后依次加上一个或多个十进制数字，
一个小数点及其后一个或多个十进制数字，以及一个可选的指数部分。
指数部分由字母e或E开始，后接一个可选的正号或负号，然后接一个或多个十进制数字。

和整数字面量的不同之处在于，浮点数的基数只能为10，例如：
    0.0
    -3.14
    6.02e23
    1_000_000.01
    
Ruby要求在小数点前后都必须要有数字出现。比如所你不能写.1，而必须显示的写为0.1。

浮点数的二进制表示和圆整错误：
    大多数计算机硬件和计算机语言都采用一种浮点数表现形式对实数进行近似的处理，比如Ruby的Float类就是如此。为了高效的使用硬件，
    大多数浮点数表现形式都是二进制的，可以精确的表示类似1/2，1/4/及1/1/1024的分数。不幸的是，我们更为常用的分数是1/10,
    1/100,1/1000等，即便像0.1这样简单的数，也无法用二进制的浮点数表现形式来精确的表达。
    Float对象的精度很高，可以很好的近似表示0.1，但是无法做到完全精确，这会带来一些问题，例如：
        0.4 - 0.3 ！= 0.1
    由于圆整错误，0.4和0.3的近似值之间的差值与0.1的近似值并不相同。
    对于这个问题的一个解决方案就是采用十进制表示实数，而不是二进制。来自Ruby标准库的BigDecimal类就是一个这样的例子。
    针对BigDecimal对象的算术操作要比针对Float值的慢上许多倍。

