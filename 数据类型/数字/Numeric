Ruby中包含了5个用来表示数字的内建类，此外标准库还包含了3个数值类，他们之间的继承关系如图。
Ruby中的所有数字对象都是Numeric类的实例。

Complex,BigDecimal,Rational类并非Ruby的内建类，但是它们作为标注库的一部分与Ruby一同发布。

所有的数值都是不可改变的，没有什么方法可以让你改变数值对象所拥有的值。因此Ruby实现通常将它们作为立即值来处理，而不是引用，
因为数字对象是不可变的，所以这两种做法之间没有什么本质差别。

Ruby中的算术操作：
    除法操作符的行为是与操作数的类型有关的。
    如果两个操作数都是整数，那么此操作符进行的是截断型的整数除法。
    如果任意一个操作数是Float，那么执行的将是浮点数除法。例如：
        x = 5/2    #result is 2
        y = 5.0/2  #result is 2.5
        z = 5/2.0  #result is 2.5

    取模操作符（%）计算整数除法的余数：
        x = 5%2      #result is 1
    取模操作符（%）计算浮点数的余数：
        x = 1.5%0.4  #result is 0.3

    Ruby中，整数除法的结果必须为整数，所以必须对结果进行圆整。Ruby采用的是向负无穷大圆整。
    按照Ruby对整数除法的定义，可以得到一个推论：-a/b 等于 a/-b, 但可能不等于 -(a/b)
    例如：
        -7/3    #-3
        7/-3    #-3
        -(7/3)  #-2

    在Ruby中，结果的符号始终和第二个操作数的符号保持一致。在C和Java里，结果的符号始终和第一个操作数的符号保持一致。
    例如：
        在Ruby中，-7%3的结果是2；但在C和Java中的结果是-1

    Ruby中使用‘**’操作符来表示指数操作，指数不必是整数：
        x**4          #等同于 x*x*x*x
        x**-1         #等同于 1/x
        x**(1/3.0)    #x的立方根
        x**(1/4)      #等同于 x**0, 其结果始终为1
        x**(1.0/4.0)  #x的4次方根
    当一个表达式含有多个指数操作时，它们按照从右到左的顺序被执行：
        4**3**3       #等同于 4**27
    指数操作能导致非常大的值。
    注意：Ruby中，整数可以变得任意大，但是Float对象却不能表示大于Float::MAX的数，
        因此，表达式10**1000可以得到精确的整数结果，但是表达式9.9**1000却会溢出得到Infinity这个Float值。

