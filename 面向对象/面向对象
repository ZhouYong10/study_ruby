简介：
    面向对象(Object Oriented,OO)是一种软件设计思想。面向对象的概念和应用已超越了程序设计和软件开发，
    扩展到如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD技术、人工智能等领域。
    面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。

    面向对象是指一种程序设计范型，同时也是一种程序开发的方法。对象指的是类的集合。
    它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性。

    面向对象的分析根据抽象关键的问题域来分解系统。面向对象的设计是一种提供符号设计系统的面向对象的实现过程，
    它用非常接近实际领域术语的方法把系统构造成“现实世界”的对象。
    面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想，
    这与传统的思想刚好相反：传统的程序设计主张将程序看作一系列函数的集合，或者直接就是一系列对电脑下达的指令。
    面向对象程序设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，
    因此它们都可以被看作一个小型的“机器”，即对象。

背景：
    1.审视问题域的视角
    在现实世界中存在的客体是问题域中的主角，所谓客体是指客观存在的对象实体和主观抽象的概念，他是人类观察问题和解决问题的主要目标。
    例如，对于一个学校学生管理系统来说，无论是简单还是复杂，始终是围绕学生和老师这两个客体实施。
    在自然界，每个客体都具有一些属性和行为，例如学生有学号、姓名、性别等属性，以及上课、考试、做实验等行为。
    因此，每个个体都可以用属性和行为来描述。

    通常人类观察问题的视角是这些客体，客体的属性反应客体在某一时刻的状态，客体的行为反映客体能从事的操作。
    这些操作附在客体之上并能用来设置、改变和获取客体的状态。
    任何问题域都有一系列的客体，因此解决问题的基本方式是让这些客体之间相互驱动、相互作用，
    最终使每个客体按照设计者的意愿改变其属性状态。

    结构化设计方法所采用的设计思路不是将客体作为一个整体，而是将依附于客体之上的行为抽取出来，以功能为目标来设计构造应用系统。
    这种做法导致在进行程序设计的时候，不得不将客体所构成的现实世界映射到由功能模块组成的解空间中，
    这种变换过程，不仅增加了程序设计的复杂程度，而且背离了人们观察问题和解决问题的基本思路。
    另外，再仔细思考会发现，在任何一个问题域中，客体是稳定的，而行为是不稳定的。
    例如，不管是国家图书馆，还是学校图书馆，还是国际图书馆，都会含有图书这个客体，但管理图书的方法可能是截然不同的。
    结构化设计方法将审视问题的视角定位于不稳定的操作之上，并将描述客体的属性和行为分开，
    使得应用程序的日后维护和扩展相当困难，甚至一个微小的变动，都会波及到整个系统。
    面对问题规模的日趋扩大、环境的日趋复杂、需求变化的日趋加快，将利用计算机解决问题的基本方法统一到人类解决问题的习惯方法之上，
    彻底改变软件设计方法与人类解决问题的常规方式扭曲的现象迫在眉睫，这是提出面向对象的首要原因。

    2.抽象级别
    抽象是人类解决问题的基本法宝。良好的抽象策略可以控制问题的复杂程度，增强系统的通用性和可扩展性。
    抽象主要包括过程抽象和数据抽象。结构化设计方法应用的是过程抽象。
    所谓过程抽象是将问题域中具有明确功能定义的操作抽取出来，并将其作为一个实体看待。
    这种抽象级别对于软件系统结构的设计显得有些武断，并且稳定性差，导致很难准确无误地设计出系统的每一个操作环节。
    一旦某个客体属性的表示方式发生了变化，就有可能牵扯到已有系统的很多部分。
    而数据抽象是较过程抽象更高级别的抽象方式，将描述客体的属性和行为绑定在一起，实现统一的抽象，
    从而达到对现实世界客体的真正模拟。

    3.封装体
    封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。
    该逻辑单元负责将所描述的属性隐藏起来，外界对客体内部属性的所有访问只能通过提供的用户接口实现。
    这样做既可以实现对客体属性的保护作用，又可以提高软件系统的可维护性。
    只要用户接口不改变，任何封装体内部的改变都不会对软件系统的其他部分造成影响。
    结构化设计方法没有做到客体的整体封装，只是封装了各个功能模块，而每个功能模块可以随意地对没有保护能力客体属性实施操作，
    并且由于描述属性的数据与行为被分割开来，所以一旦某个客体属性的表达方式发生了变化，或某个行为效果发生了改变，
    就有可能对整个系统产生影响。

    4.可重用性
    可重用性标识着软件产品的可复用能力，是衡量一个软件产品成功与否的重要标志。
    当今的软件开发行业，人们越来越追求开发更多的、更有通用性的可重用构件，从而使软件开发过程彻底改善，
    即从过去的语句级编写发展到现在的构件组装，从而提高软件开发效率，推动应用领域迅速扩展。
    然而，结构化程序设计方法的基本单位是模块，每个模块只是实现特定功能的过程描述，因此，它的可重用单位只能是模块。
    例如，在C语言编写程序时使用大量的标准函数。但对于今天的软件开发来说，这样的重用力度显得微不足道，
    而且当参与操作的某些数据类型发生变化时，就不能够再使用那些函数了。
    因此，渴望更大力度的可重用构件是如今应用领域对软件开发提出的新需求。

 上述弱点驱使人们寻求一种新的程序设计方法，以适应现代社会对软件开发的更高要求，面向对象由此产生。

概念：
    1.对象
    对象是人们要进行研究的任何事物，从最简单的整数到复杂的飞机等均可看作对象，
    它不仅能表示具体的事物，还能表示抽象的规则、计划或事件。

    2.对象的状态和行为
    对象具有状态，一个对象用数据值来描述它的状态。
    对象还有操作，用于改变对象的状态，对象及其操作就是对象的行为。
    对象实现了数据和操作的结合，使数据和操作封装于对象的统一体中。

    3.类
    具有相同特性和行为的对象的抽象就是类。
    因此，对象的抽象是类，类的具体化就是对象，也可以说类的实例是对象，类实际上就是一种数据类型。
    类具有属性，它是对象的状态的抽象，用数据结构来描述类的属性。
    类具有操作，它是对象的行为的抽象，用操作名和实现该操作的方法来描述。

    4.类的结构
    在客观世界中有若干类，这些类之间有一定的结构关系。
    通常有两种主要的结构关系，一般--具体结构关系，整体--部分结构关系。
    ①一般--具体结构称为分类结构，也可以说是“或”关系，或者是“is a”关系。
    ②整体--部分结构称为组装结构，它们之间的关系是一种“与”关系，或者是“has a”关系。

    5.消息和方法
    对象之间进行通信的结构叫做消息。
    在对象的操作中，当一个消息发送给某个对象时，消息包含接收对象去执行某种操作的信息。
    发送一条消息至少要包括说明接受消息的对象名、发送给该对象的消息名（即对象名、方法名）。
    一般还要对参数加以说明，参数可以是认识该消息的对象所知道的变量名，或者是所有对象都知道的全局变量名。
    类中操作的实现过程叫做方法，一个方法有方法名、返回值、参数、方法体。

特征：
    1.对象的唯一性
    每个对象都有自身唯一的标识，通过这种标识，可找到相应的对象。
    在对象的整个生命期中，它的标识都不改变，不同的对象不能有相同的标识。

    2.抽象性
    抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。
    一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。
    任何类的划分都是主观的，但必须与具体的应用有关。

    3.继承性
    继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。
    在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，
    把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。

    继承性是面向对象程序设计语言不同于其它语言的最重要的特点，是其他语言所没有的。

    在类层次中，子类只继承一个父类的数据结构和方法，则称为单重继承。
    在类层次中，子类继承了多个父类的数据结构和方法，则称为多重继承。

    多重继承，JAVA、VB、NET、Objective-C均仅支持单继承，注意在C++多重继承时，需小心二义性。
    在软件开发中，类的继承性使所建立的软件具有开放性、可扩充性，这是信息组织与分类的行之有效的方法，
    它简化了对象、类的创建工作量，增加了代码的可重用性。
    采用继承性，提供了类的规范的等级结构。通过类的继承关系，使公共的特性能够共享，提高了软件的重用性。

    4.多态性
    多态性是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。
    不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。
    多态性允许每个对象以适合自身的方式去响应共同的消息。
    多态性增强了软件的灵活性和重用性。

要素：
    1.抽象
    抽象是指强调实体的本质、内在的属性。
    在系统开发中，抽象指的是在决定如何实现对象之前的对象的意义和行为。
    使用抽象可以尽可能避免过早考虑一些细节。
    类实现了对象的数据（即状态）和行为的抽象。

    2.封装性
    封装性是保证软件部件具有优良的模块性的基础。
    面向对象的类是封装良好的模块，类定义将其说明（用户可见的外部接口）与实现（用户不可见的内部实现）显式地分开，
    其内部实现按其具体定义的作用域提供保护。

    对象是封装的最基本单位。
    封装防止了程序相互依赖性而带来的变动影响。
    面向对象的封装比传统语言的封装更为清晰、更为有力。

    3.共享性
    面向对象技术在不同级别上促进了共享。

    同一类中的共享。
    同一类中的对象有着相同数据结构。
    这些对象之间是结构、行为特征的共享关系。

    在同一应用中共享。
    在同一应用的类层次结构中，存在继承关系的各相似子类中，存在数据结构和行为的继承，使各相似子类共享共同的结构和行为。
    使用继承来实现代码的共享，这也是面向对象的主要优点之一。

    在不同应用中共享。
    面向对象不仅允许在同一应用中共享信息，而且为未来目标的可重用设计准备了条件。
    通过类库这种机制和结构来实现不同应用中的信息共享。

模型：
    对象模型
        对象模型表示了静态的、结构化的系统数据性质，描述了系统的静态结构，它是从客观世界实体的对象关系角度来描述和表现对象的相互关系。
        该模型主要关心系统中对象的结构、属性和操作，它是分析阶段三个模型的核心，是其他两个模型的框架。

        ⒈对象和类
            ⑴对象。
            对象建模的目的就是描述对象。
            ⑵ 类。
            通过将对象抽象成类，我们可以使问题抽象化，抽象增强了模型的归纳能力。
            ⑶ 属性。
            属性指的是类中对象所具有的性质（数据值）。
            ⑷ 操作和方法。
            操作是类中对象所使用的一种功能或变换。类中的各对象可以共享操作，每个操作都有一个目标对象作为其隐含参数。
            方法是类的操作的实现步骤。
        ⒉关联和链
            关联是建立类之间关系的一种手段，而链则是建立对象之间关系的一种手段。
            ⑴ 关联和链的含义。
            链表示对象间的物理与概念联结，关联表示类之间的一种关系，链是关联的实例，关联是链的抽象。
            ⑵ 角色。
            角色说明类在关联中的作用，它位于关联的端点。
            ⑶ 受限关联。
            受限关联由两个类及一个限定词组成，限定词是一种特定的属性，用来有效的减少关联的重数，限定词在关联的终端对象集中说明。
            限定提高了语义的精确性，增强了查询能力，在现实世界中，常常出现限定词。
            ⑷ 关联的多重性。
            关联的多重性是指类中有多少个对象与关联的类的一个对象相关。重数常描述为“一”或“多”。
        ⒊类的层次结构
            ⑴ 聚集关系。
            聚集是一种“整体－部分”关系。在这种关系中，有整体类和部分类之分。聚集最重要的性质是传递性，也具有逆对称性。
            聚集可以有不同层次，可以把不同分类聚集起来得到一颗简单的聚集树，聚集树是一种简单表示，
            比画很多线来将部分类联系起来简单得多，对象模型应该容易地反映各级层次。
            ⑵一般化关系。
            一般化关系是在保留对象差异的同时共享对象相似性的一种高度抽象方式。
            它是“一般---具体”的关系。一般化类称为你类，具体类又能称为子类，各子类继承了父类的性质，
            而各子类的一些共同性质和操作又归纳到你类中。因此，一般化关系和继承是同时存在的。
            一般化关系的符号表示是在类关联的连线上加一个小三角形。
        ⒋对象模型
            ⑴模板。模板是类、关联、一般化结构的逻辑组成。
            ⑵对象模型。
            对象模型是由一个或若干个模板组成。
            模板将模型分为若干个便于管理的子块，在整个对象模型和类及关联的构造块之间，
            模板提供了一种集成的中间单元，模板中的类名及关联名是唯一的。
