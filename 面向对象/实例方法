实例方法：
    实例方法的定义与其他方法的定义一样，都是使用 def 关键字，但它们只能通过实例来使用。
    它们的功能不限于访问实例变量，也能按照需求做更多其他的任务。

    # 定义类
    class Box
       # constructor method
       def initialize(w,h)
          @width, @height = w, h
       end
       # 实例方法
       def getArea
          @width * @height
       end
    end

    # 创建对象
    box = Box.new(10, 20)

    # 调用实例方法
    a = box.getArea()
    puts "Area of the box is : #{a}"
    当上面的代码执行时，它会产生以下结果：

    Area of the box is : 200


实例方法访问权限：
    Ruby提供了三个级别的实例方法保护，分别是 public、private 和 protected。
    Ruby不在实例和类变量上应用任何访问控制。

    Public 方法： Public 方法可被任意对象调用。默认情况下，实例方法都是 public 的，initialize 方法总是 private 的。
    Private 方法： Private 方法不能从类外部访问或查看。只有类方法可以访问私有成员。
    Protected 方法： Protected 方法只能被类及其子类的对象调用。访问也只能在类及其子类内部进行。
    下面是一个简单的实例，演示了这三种修饰符的语法：

    # 定义类
    class Box
       # 构造器方法
       def initialize(w,h)
          @width, @height = w, h
       end

       # 实例方法默认是 public 的
       def getArea
          getWidth() * getHeight
       end

       # 定义 private 的访问器方法
       def getWidth
          @width
       end
       def getHeight
          @height
       end
       # make them private
       private :getWidth, :getHeight

       # 用于输出面积的实例方法
       def printArea
          @area = getWidth() * getHeight
          puts "Big box area is : #@area"
       end
       # 让实例方法是 protected 的
       protected :printArea
    end

    # 创建对象
    box = Box.new(10, 20)

    # 调用实例方法
    a = box.getArea()
    puts "Area of the box is : #{a}"

    # 尝试调用 protected 的实例方法
    box.printArea()
    当上面的代码执行时，它会产生以下结果。在这里，第一种方法调用成功，但是第二方法会产生一个问题。

    Area of the box is : 200
    test.rb:42: protected method `printArea' called for #
    <Box:0xb7f11280 @height=20, @width=10> (NoMethodError)